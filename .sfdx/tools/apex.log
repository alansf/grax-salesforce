Jan 25, 2018 2:04:20 PM apex.jorje.parser.impl.BaseApexLexer dedupe
INFO: Deduped array ApexLexer.DFA22_transition. Found 7730596 shorts which is 14MB not including array overhead. Removed 7073965 shorts which is 13MB not counting array overhead.Took 17ms.
Jan 25, 2018 2:04:24 PM com.google.common.util.concurrent.ServiceManager$ServiceListener failed
SEVERE: Service Apex Prelude Service [FAILED] has failed in the STARTING state.
org.eclipse.jdt.internal.core.nd.db.IndexException: Corrupted database: apex.db
	at org.eclipse.jdt.internal.core.nd.db.Database.databaseCorruptionDetected(Database.java:427)
	at org.eclipse.jdt.internal.core.nd.db.Database.getChunk(Database.java:402)
	at org.eclipse.jdt.internal.core.nd.db.Database.getInt(Database.java:1100)
	at org.eclipse.jdt.internal.core.nd.db.Database.getString(Database.java:1218)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchKey.get(FieldSearchKey.java:76)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:127)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:649)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.getResourceFile(ApexIndex.java:129)
	at apex.jorje.lsp.impl.services.ApexPreludeManagedService.scanApexStandardLibraryIfNecessary(ApexPreludeManagedService.java:165)
	at apex.jorje.lsp.impl.services.ApexPreludeManagedService.startUp(ApexPreludeManagedService.java:93)
	at com.google.common.util.concurrent.AbstractIdleService$2$1.run(AbstractIdleService.java:54)
	at com.google.common.util.concurrent.Callables$3.run(Callables.java:95)
	at java.lang.Thread.run(Thread.java:748)

Exception in thread "Apex Prelude Service STARTING" org.eclipse.jdt.internal.core.nd.db.IndexException: Corrupted database: apex.db
	at org.eclipse.jdt.internal.core.nd.db.Database.databaseCorruptionDetected(Database.java:427)
	at org.eclipse.jdt.internal.core.nd.db.Database.getChunk(Database.java:402)
	at org.eclipse.jdt.internal.core.nd.db.Database.getInt(Database.java:1100)
	at org.eclipse.jdt.internal.core.nd.db.Database.getString(Database.java:1218)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchKey.get(FieldSearchKey.java:76)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:127)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:649)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.getResourceFile(ApexIndex.java:129)
	at apex.jorje.lsp.impl.services.ApexPreludeManagedService.scanApexStandardLibraryIfNecessary(ApexPreludeManagedService.java:165)
	at apex.jorje.lsp.impl.services.ApexPreludeManagedService.startUp(ApexPreludeManagedService.java:93)
	at com.google.common.util.concurrent.AbstractIdleService$2$1.run(AbstractIdleService.java:54)
	at com.google.common.util.concurrent.Callables$3.run(Callables.java:95)
	at java.lang.Thread.run(Thread.java:748)
Jan 25, 2018 2:39:16 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='')
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:16 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='')
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidOpen(DiagnosticsReporter.java:74)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$0(DocumentLifecycleDispatcher.java:60)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:16 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' )
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:16 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' )
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:16 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' )
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:16 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' &)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:16 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' &)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:16 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' &)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:17 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' &&)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:17 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' &&)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:17 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' &&)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:17 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && )
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:17 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && )
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:17 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && )
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:21 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:21 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:22 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:23 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidSave(DiagnosticsReporter.java:91)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$6(DocumentLifecycleDispatcher.java:87)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:41 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:41 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:41 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:41 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:41 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:41 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=n)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=n)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=n)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=nu)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=nu)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=nu)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=nul)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=nul)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=nul)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:39:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='')
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidSave(DiagnosticsReporter.java:91)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$6(DocumentLifecycleDispatcher.java:87)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' )
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' )
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' )
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' &)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' &)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' &)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' &&)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' &&)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:38 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' &&)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:39 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && )
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:39 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && )
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:39 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && )
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:42 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:43 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:43 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:43 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:43 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:43 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:43 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=n)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=n)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=n)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=nu)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=nu)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=nu)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=nul)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=nul)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=nul)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=null)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidChange(DiagnosticsReporter.java:80)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=null)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:44 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=null)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.index.ApexIndexer.lambda$insertTypeInfo$1(ApexIndexer.java:393)
	at java.util.Optional.ifPresent(Optional.java:159)
	at apex.jorje.lsp.impl.index.ApexIndexer.insertTypeInfo(ApexIndexer.java:385)
	at apex.jorje.lsp.impl.index.ApexIndexer.updateTypeInfo(ApexIndexer.java:425)
	at apex.jorje.lsp.impl.index.ApexIndexer.handleDidChange(ApexIndexer.java:435)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$2(DocumentLifecycleDispatcher.java:71)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Jan 25, 2018 2:40:45 PM apex.jorje.semantic.compiler.CodeUnit validate
INFO: unexpected error during apex validate:
global class GRAXBatch implements
    Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    // instance member to retain state across transactions
    global Integer recordsProcessed = 0;
    global Integer recordLimit = 200;
    global String Query = '';
    global String CurrentObjectName = '';

    string BuildQuery(string ObjectName){     
        string BuildQuery = '';
        
        SObjectType t = Schema.getGlobalDescribe().get(ObjectName);
        SObject o = t.newSobject();
        Map<String, Schema.SObjectField> m = t.getDescribe().fields.getMap();
        for (String fieldName : m.keySet()) {
            if (BuildQuery!=''){
                BuildQuery+=',';
            }
          BuildQuery += fieldName;
        }

        if (BuildQuery!=''){
            // Query = 'Select ' + BuildQuery + ' From ' + ObjectName + ' LIMIT ' + recordLimit;
            Query = 'Select ' + BuildQuery + ' From ' + ObjectName;
        }
        return Query;
   }

    global GRAXBatch(String ObjectName){
        if (ObjectName!=''){
        	    List<GRAXQuery__c> GRAXSavedQueries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    			if (!GRAXSavedQueries.isEmpty()){
    				GRAXQuery__c GRAXSavedQuery = GRAXSavedQueries[0];
    				Query = 'SELECT ' + GRAXSavedQuery.Selected_Fields__c + ' FROM ' + GRAXSavedQuery.ObjectName__c;
    				if (GRAXSavedQuery.Filter__c!='' && GRAXSavedQuery.Filter__c!=null)
    					Query+= ' WHERE ' + GRAXSavedQuery.Filter__c;
    				
    				if (GRAXSavedQuery.Order_By__c!='' && GRAXSavedQuery.Order_By__c!=null)
    					Query+= ' ORDER BY ' + GRAXSavedQuery.Order_By__c;
    			}
        		else
            		Query = BuildQuery(ObjectName);
        }
        CurrentObjectName = ObjectName;
    }

    global Database.QueryLocator start(Database.BatchableContext bc) {
        System.debug('Starting Batch Query: ' + Query);
        return Database.getQueryLocator(Query);
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope){
        List<Object> triggerNew = new List<Object>();
        List<Object> triggerOld = new List<Object>();

        String url = 'https://prod.hardingpoint.com/v9.3/api';

        for (SObject currentObject : scope) {
            System.debug('Processing: ' + currentObject.Id);
            triggerNew.add(currentObject);
            recordsProcessed++;
        }
        GRAXApi.calloutnow(url,GRAXApi.jsonContent(triggerNew,triggerOld));
    }

    global void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' Records Synchronized. Harding Point Graph Synchronized for ' + CurrentObjectName);
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];

        // CreatedBy.Email
        // call some utility to send email
        // EmailUtils.sendMessage(a, recordsProcessed);
    }

    public static void ProcessHistory(String ObjectName){
        GRAXBatch newbatch = new GRAXBatch(ObjectName);
        Database.executeBatch(newbatch, 10);
    }
}
java.nio.BufferUnderflowException
	at java.nio.CharBuffer.get(CharBuffer.java:688)
	at org.eclipse.jdt.internal.core.nd.db.Chunk.getChars(Chunk.java:285)
	at org.eclipse.jdt.internal.core.nd.db.LongString.getChars(LongString.java:121)
	at org.eclipse.jdt.internal.core.nd.db.LongString.compare(LongString.java:223)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex$SearchCriteriaToBtreeVisitorAdapter.compare(FieldSearchIndex.java:132)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:628)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:647)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:655)
	at org.eclipse.jdt.internal.core.nd.db.BTree.accept(BTree.java:598)
	at org.eclipse.jdt.internal.core.nd.field.FieldSearchIndex.findBest(FieldSearchIndex.java:232)
	at apex.jorje.lsp.impl.index.ApexIndex.findExactTypeId(ApexIndex.java:192)
	at apex.jorje.lsp.impl.symbols.ApexSymbolProvider.find(ApexSymbolProvider.java:139)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.find(StandardSymbolResolver.java:427)
	at apex.jorje.semantic.symbol.resolver.rules.OnePartTypeNameResolveRules$TopLevelTypeInSameNamespace.lookup(OnePartTypeNameResolveRules.java:407)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.getTypeFromOnePartRules(TypeNameResolutionOrderUtil.java:104)
	at apex.jorje.semantic.symbol.resolver.rules.TypeNameResolutionOrderUtil.bindToType(TypeNameResolutionOrderUtil.java:55)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfo(StandardSymbolResolver.java:373)
	at apex.jorje.semantic.symbol.resolver.StandardSymbolResolver.lookupTypeInfoIdentifiers(StandardSymbolResolver.java:194)
	at apex.jorje.semantic.ast.expression.ReferenceExpression.validate(ReferenceExpression.java:202)
	at apex.jorje.semantic.ast.expression.MethodCallExpression.validate(MethodCallExpression.java:165)
	at apex.jorje.semantic.ast.statement.ExpressionStatement.validate(ExpressionStatement.java:60)
	at apex.jorje.semantic.ast.statement.BlockStatement.validate(BlockStatement.java:151)
	at apex.jorje.semantic.ast.statement.MethodBlockStatement.validate(MethodBlockStatement.java:82)
	at apex.jorje.semantic.ast.member.Method.validate(Method.java:164)
	at apex.jorje.semantic.ast.compilation.UserClass.validate(UserClass.java:169)
	at apex.jorje.semantic.compiler.CodeUnit.validate(CodeUnit.java:199)
	at apex.jorje.semantic.compiler.CompilerOperations$ValidateOperation.invoke(CompilerOperations.java:106)
	at apex.jorje.semantic.compiler.ApexCompiler.processNext(ApexCompiler.java:231)
	at apex.jorje.semantic.compiler.ApexCompiler.compileInternal(ApexCompiler.java:137)
	at apex.jorje.semantic.compiler.ApexCompiler.compile(ApexCompiler.java:125)
	at apex.jorje.lsp.impl.services.StandardCompilerService.compile(StandardCompilerService.java:122)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.analyzeErrors(DiagnosticsReporter.java:147)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.generateDiagnostics(DiagnosticsReporter.java:119)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.publishDiagnostics(DiagnosticsReporter.java:106)
	at java.util.Optional.map(Optional.java:215)
	at apex.jorje.lsp.impl.diagnostics.DiagnosticsReporter.handleDidSave(DiagnosticsReporter.java:91)
	at apex.jorje.lsp.impl.document.DocumentLifecycleDispatcher.lambda$null$6(DocumentLifecycleDispatcher.java:87)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

