public class GRAXConfiguration {

    List<FieldProperties> FieldProperties;
    Map<String,GRAXQuery__c> sychedObjectsSaved;
    Map<String,String> RelatedToList;
    
    public string objToQuery {get;set;}
     
    public string defaultfields {get;set;}
    public string defaultfilter {get;set;}
    public string defaultprocessordering {get;set;}
    
    public string graxconfig {get;set;}
    
    public boolean enablesynch {get;set;}
      
    public GRAXConfiguration () { 
    		sychedObjectsSaved = getSynchedObjects();
    		RelatedToList = new Map<String,String>();
    }  
    
    public Map<String,GRAXQuery__c> getSynchedObjects()
    {
    		Map<String,GRAXQuery__c> synchedObjects = new Map<String,GRAXQuery__c>();
    		List<GRAXQuery__c> queries = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c  From GRAXQuery__c];
    		for (GRAXQuery__c query : queries){
    			synchedObjects.put(query.ObjectName__c,query);
    		}
    		return synchedObjects;
    }
    
    public List<FieldProperties> getfieldProperties ()
    {
        FieldProperties= new List<FieldProperties>();
        SObjectType objType = Schema.getGlobalDescribe().get(objtoquery);
        if (objType != null)
        {
        Map<String,Schema.SObjectField> fields = objType.getDescribe().fields.getMap();
        for (String s : fields.keySet()) 
             {
                if (fields.get(s).getDescribe().isAccessible()){
                		FieldProperties.add(new FieldProperties(objtoquery, s, sychedObjectsSaved));
                }
             }
        }
        SynchSaved(objToQuery);
        return FieldProperties;
    }
    
   
    public List<SelectOption> getItems() 
    {
       string cobjname;
       List<SelectOption> options = new List<SelectOption>();
       List<Schema.SObjectType> gd = Schema.getGlobalDescribe().Values();  
       for(Schema.SObjectType f : gd){
			cobjname = f.getDescribe().getName();
			options.add(new SelectOption(cobjname ,cobjname ));
       }  
       options.sort();
       return options;
    }
    
    public class FieldProperties
    {
        private string sObjtoquery;
        public string fieldname{get;set;}
        public string fieldtype{get;set;}
        public string referenceto{get;set;}
        public string message{get;set;}
        
        public boolean fieldselected{get;set;}
        public boolean disabled{get;set;} 		// Disable if Object not Synched
        
        public FieldProperties() {}  
        
        public FieldProperties(string objname, string fieldname, Map<String,GRAXQuery__c> sychedObjectsSaved) {
            this.sObjtoquery = objname;
            this.fieldname = fieldname;
            this.fieldselected = false;
            getAttributes(objname, fieldname, sychedObjectsSaved);
        }
    
        public void getAttributes(string objtoquery, string afieldname, Map<String,GRAXQuery__c> sychedObjectsSaved)
        {
          SObjectType objType = Schema.getGlobalDescribe().get(objtoquery);
          Map<String,Schema.SObjectField> fields = objType.getDescribe().fields.getMap();
          if (fields.get(afieldname).getDescribe().isAccessible())
          {  
			fieldname = afieldname;
			fieldtype = string.valueof(fields.get(afieldname).getDescribe().getType());
			if (fieldname=='name' || fieldname=='id'){
				fieldselected=true;
			}else if (fieldtype=='REFERENCE') {
				referenceto = string.valueof(fields.get(afieldname).getDescribe().getReferenceTo()).replace('(','').replace(')','');
				if (sychedObjectsSaved.get(referenceto)!=null || referenceto==objToQuery){
					fieldselected=true;
					message = 'Synchronized';
				}else{
					fieldselected=false;
					disabled = true;
					message = 'Not Synchronized';
				}
			}
          }
        }
    } 
    
    Public Pagereference QueryObject()
    {    return null;    }
    
    private void SynchSaved(String ObjectName){
    	    integer counter = 0;
    		List<GRAXQuery__c> query = [Select Id, Name, ObjectName__c,Selected_Fields__c,Order_By__c,Filter__c,graxconfig__c  From GRAXQuery__c where ObjectName__c=:ObjectName];
    		if (!query.isEmpty()){
    			enablesynch = false;
    			defaultfilter = query[0].Filter__c;
    			defaultprocessordering = query[0].Order_By__c;
    			defaultfields = query[0].Selected_Fields__c;
    			graxconfig = query[0].graxconfig__c;
    			string currentfields = ','+ query[0].Selected_Fields__c + ',';
    			for(FieldProperties obj : FieldProperties){
    				if (currentfields.indexOf(',' + obj.fieldname + ',') >0 ){
    					FieldProperties[counter].fieldselected=true;
    				}
    				counter++;
    			}
    		}
    		else{
    			enablesynch = true;
    			SynchSelectedFields();
    		}
    }
    
    private void SynchSelectedFields(){
    		string fieldlist = ''; 		 
    		List<FieldProperties> SelectedProperties = new List<FieldProperties>();
    		for(FieldProperties obj : FieldProperties){
    			if (obj!=null){
	    			if (obj.fieldselected){
	    				SelectedProperties.add(obj);
	    				if (obj.referenceto!=null)
	    					RelatedToList.put(obj.fieldname, obj.referenceto);
	    					
	    				if (fieldlist!='')
	    					fieldlist+=',';
	    				fieldlist+=obj.fieldname;
	    			}
    			}
    		}
    		// graxconfig = JSON.serialize(SelectedProperties);
    		graxconfig = '{"sobject":\"' + objToQuery + '\",' + 
    							'"fieldsselected":"' + fieldlist + '",' +
    							'"orderby":"' + defaultprocessordering + '",' + 
    							'"filterby":"' + defaultfilter+ '",' + 
    							'"lookupmap":' + 
    								JSON.serialize(RelatedToList) + 
    						'}';
    		
    		defaultfields = fieldlist;
    }
    
    Public Pagereference SaveSelection()
    {    
    		GRAXQuery__c newQuery = new GRAXQuery__c();
    		newQuery.ObjectName__c = objToQuery;
    		SynchSelectedFields();
    		newQuery.Selected_Fields__c = defaultfields;
    		newQuery.Order_By__c=defaultprocessordering;
    		newQuery.Filter__c=defaultfilter;
    		newQuery.graxconfig__c = graxconfig;
    		upsert newQuery ObjectName__c;
    		enablesynch = true;
    		return null;   
	}
	
	Public Pagereference Synchronize(){ 
		SaveSelection();
		GRAXBatch.ProcessHistory(objToQuery);
		return null;
    }
    
 }
